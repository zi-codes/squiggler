{"version":3,"sources":["components/Gateway.js","components/SignUp.js","components/LogIn.js","components/CreateSquiggle.js","components/Like.js","components/Delete.js","components/Squiggle.js","components/Squiggles.js","components/FowwestView.js","App.js","serviceWorker.js","index.js","images/acorn.svg","images/squiggle_default.jpeg"],"names":["Gateway","className","src","logo","alt","to","Fab","variant","aria-label","color","Component","SignUp","state","handle","password","redirect","setRedirect","setState","renderRedirect","handleHandleChange","event","target","value","handlePasswordChange","handleSubmit","preventDefault","axios","post","then","res","sessionStorage","setItem","data","user_id","session_key","this","Paper","style","margin","padding","Typography","component","onSubmit","noValidate","Grid","container","spacing","item","xs","TextField","required","fullWidth","id","label","name","autoComplete","onChange","type","Button","justify","Link","href","React","Login","CreateSquiggle","squiggle","handleChange","props","createSquiggle","direction","alignItems","multiline","rows","rowsMax","Like","isLiked","likes","getItem","user_object","findUser","forEach","like","user","toString","handleClick","toggleLike","addLike","deleteLike","put","headers","console","log","delete","array","index","indexOf","splice","map","key","FormControlLabel","control","Switch","checked","onClick","Delete","deleteSquiggle","isMine","size","Squiggle","likeStatus","prettify","timestamp","slice","CardActionArea","Card","CardContent","created_at","paragraph","body","CardMedia","image","piccy","height","title","Squiggles","squiggles","FowwestView","deleteSquiggleFromState","filtered","filter","get","App","Fragment","CssBaseline","Container","maxWidth","baseline","process","exact","path","LogIn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.be7246ad.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport logo from '../images/acorn.svg';\nimport Fab from '@material-ui/core/Fab';\n\n\n\nclass Gateway extends Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Welcome to Squiggler\n        </p>\n\n        <Link to=\"/login\">\n\n          <Fab variant=\"extended\" aria-label=\"go\" color=\"primary\">\n            Enter the Fowwest\n          </Fab>\n        </Link>\n\n      </header>\n    )\n  }\n}\n\n\nexport default Gateway;\n","import React from 'react'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper'\n\nclass SignUp extends React.Component {\n\n  state = {\n    handle: \"\",\n    password: \"\",\n    redirect: false\n  }\n\n  setRedirect = () => {\n    this.setState({\n      redirect: true\n    })\n  }\n\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to='/squiggles' />\n    }\n  }\n\n  handleHandleChange = event => {\n    this.setState({handle: event.target.value})\n  }\n\n  handlePasswordChange = event => {\n    this.setState({password: event.target.value})\n  }\n\n  handleSubmit = event => {\n      event.preventDefault()\n\n      axios.post(\n        'https://chitter-backend-api.herokuapp.com/users',\n        {\"user\": {\"handle\":this.state.handle, \"password\":this.state.password}}\n      )\n      .then(res => {\n\n        axios.post(\n          'https://chitter-backend-api.herokuapp.com/sessions',\n          {\"session\": {\"handle\":this.state.handle, \"password\":this.state.password}}\n        )\n        .then(res => {\n          sessionStorage.setItem('user_id', res.data.user_id)\n          sessionStorage.setItem('session_key', res.data.session_key)\n          this.setRedirect()\n        })\n\n\n\n      })\n  }\n\n\n\n\n  render () {\n    return (\n      <>\n      {this.renderRedirect()}\n      <Paper style={{margin:\"30px\", padding:\"30px\"}}>\n        <Typography\n          style={{padding: \"0.5em 0\"}}\n          component=\"h1\"\n          variant=\"h5\">\n          Join the Fowwest\n        </Typography>\n        <form onSubmit={this.handleSubmit} noValidate>\n          <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Secret Squiggle Alias\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange = {this.handleHandleChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange = {this.handlePasswordChange}\n              />\n            </Grid>\n\n          </Grid>\n          <Button\n            style={{margin: \"1.5em 0\"}}\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/login\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n      </>\n    )\n  }\n}\n\nexport default SignUp;\n","import React from 'react'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nclass Login extends React.Component {\n\n  state = {\n    handle: \"\",\n    password: \"\",\n    redirect: false\n  }\n\n  setRedirect = () => {\n    this.setState({\n      redirect: true\n    })\n  }\n\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to='/squiggles' />\n    }\n  }\n\n  handleHandleChange = event => {\n    this.setState({handle: event.target.value})\n  }\n\n  handlePasswordChange = event => {\n    this.setState({password: event.target.value})\n  }\n\n  handleSubmit = event => {\n      event.preventDefault()\n\n      axios.post(\n        'https://chitter-backend-api.herokuapp.com/sessions',\n        {\"session\": {\"handle\":this.state.handle, \"password\":this.state.password}}\n      )\n      .then(res => {\n        sessionStorage.setItem('user_id', res.data.user_id)\n        sessionStorage.setItem('session_key', res.data.session_key)\n        this.setRedirect()\n      })\n\n\n  }\n\n\n\n\n  render () {\n    return (\n      <>\n      {this.renderRedirect()}\n      <Paper style={{margin:\"30px\", padding:\"30px\"}}>\n        <Typography\n          style={{padding: \"0.5em 0\"}}\n          component=\"h1\"\n          variant=\"h5\">\n          Enter the Fowwest\n        </Typography>\n        <form onSubmit={this.handleSubmit} noValidate>\n          <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Secret Squiggle Alias\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange = {this.handleHandleChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange = {this.handlePasswordChange}\n              />\n            </Grid>\n\n          </Grid>\n          <Button\n            style={{margin: \"1.5em 0\"}}\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n\n          >\n            Log In\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/signup\" variant=\"body2\">\n                No account? Sign up here\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n      </>\n    )\n  }\n}\n\nexport default Login;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\n\n\nclass CreateSquiggle extends React.Component {\n\n  state = {\n    squiggle: \"\",\n\n  }\n\n  handleChange = event => {\n    this.setState({squiggle: event.target.value})\n  }\n\n  handleSubmit = event => {\n      event.preventDefault()\n      this.props.createSquiggle(this.state.squiggle)\n      this.setState({squiggle: \"\"})\n  }\n\n\n\n  render () {\n    return (\n      <Paper style={{margin: \"30px 0\", padding:\"20px 0px\"}}>\n        <form onSubmit={this.handleSubmit}>\n          <Grid container\n            spacing={1}\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={12}>\n              <TextField\n               id=\"outlined-multiline-flexible\"\n               label=\"Write your squiggle here\"\n               multiline\n               fullWidth\n               rows=\"2\"\n               rowsMax=\"4\"\n               variant=\"outlined\"\n               style={{margin: \"20px auto\"}}\n               onChange = {this.handleChange}\n\n              />\n            </Grid>\n            <Grid item xs={12}>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">Submit</Button>\n            </Grid>\n          </Grid>\n      </form>\n      </Paper>\n    )\n\n  }\n}\n\nCreateSquiggle.propTypes = {\n  createSquiggle: PropTypes.func.isRequired\n}\n\nexport default CreateSquiggle;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from '@material-ui/core/Switch';\nimport axios from 'axios'\n\nclass Like extends React.Component {\n\n  state = {\n    isLiked:false,\n    likes: this.props.squiggle.likes,\n    user_id: sessionStorage.getItem('user_id'),\n    session_key: sessionStorage.getItem('session_key'),\n    user_object:null,\n  }\n\n  componentDidMount() {\n    this.findUser()\n  }\n\n  findUser = () => {\n    this.state.likes.forEach((like)=> {\n\n      if(like.user.id.toString(10) === this.state.user_id){\n        this.setState({isLiked:true})\n        this.setState({user_object:like})\n      }\n    })\n\n  }\n\n  handleClick = event => {\n    this.state.isLiked = !this.state.isLiked\n    this.props.toggleLike(this.state.isLiked)\n    if(this.state.isLiked === true) {\n      this.addLike()\n    } else {\n      this.deleteLike()\n    }\n  }\n\n  addLike = () => {\n    axios.put(\n      `https://chitter-backend-api.herokuapp.com/peeps/${this.props.squiggle.id}/likes/${this.state.user_id}`,\n      null,\n      {headers:{\n        \"Authorization\": `Token token=${this.state.session_key}`,\n      }}\n    )\n    .then(res => {\n      console.log(res)\n      console.log(res.data)\n      this.setState({ likes: [...this.state.likes, res.data]})\n      this.setState({ user_object: res.data})\n    })\n  }\n\n  deleteLike = () => {\n    axios.delete(\n      `https://chitter-backend-api.herokuapp.com/peeps/${this.props.squiggle.id}/likes/${this.state.user_id}`,\n      {headers:{\n        \"Authorization\": `Token token=${this.state.session_key}`,\n      }}\n    )\n    .then(res => {\n      const array = [...this.state.likes]\n      const index = array.indexOf(this.state.user_object)\n      if (index !== -1) {\n        array.splice(index,1)\n        this.setState({likes: array})\n      }\n    })\n  }\n\n\n  render () {\n\n    return (\n      <>\n\n        <Typography variant=\"subtitle1\" color=\"primary\">\n          Liked by {this.state.likes.map((like)=>(\n\n              <span key={like.user.id}>🌰{like.user.handle} </span>\n\n          ))}\n\n        </Typography>\n        <FormControlLabel\n          control={\n            <Switch checked={this.state.isLiked} onClick={this.handleClick}/>\n          }\n          label=\"Like this squiggle\"\n        />\n      </>\n    )\n\n  }\n}\n\nLike.propTypes = {\n  toggleLike: PropTypes.func.isRequired\n}\n\nexport default Like ;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Fab from '@material-ui/core/Fab';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nclass Delete extends React.Component {\n\n  handleClick = event => {\n    this.props.deleteSquiggle()\n  }\n\n\n  render () {\n\n    if(this.props.isMine) {\n\n      return (\n        <Fab\n          style={{margin:\"10px 0px 0px 30px\"}}\n          size=\"small\"\n          aria-label=\"delete\"\n          onClick={this.handleClick}\n        >\n          <DeleteIcon />\n        </Fab>\n      )\n\n    } else {\n      return (\n        <>\n        </>\n      )\n    }\n\n  }\n}\n\nDelete.propTypes = {\n  deleteSquiggle: PropTypes.func.isRequired\n}\n\nexport default Delete;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport piccy from '../images/squiggle_default.jpeg'\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport Like from './Like'\nimport Delete from './Delete'\n\nclass Squiggle extends React.Component {\n\n  state = {\n    isMine: false,\n    user_id: sessionStorage.getItem('user_id'),\n  }\n\n  componentDidMount() {\n    if(this.props.squiggle.user.id.toString(10)=== this.state.user_id) {\n      this.setState({isMine:true})\n    }\n  }\n\n  toggleLike = (likeStatus) => {\n    this.props.toggleLike(likeStatus)\n  }\n\n  prettify = (timestamp) => {\n    const date = timestamp.slice(0,10)\n    const time = timestamp.slice(11,19)\n    const datetime = date + \" @ \" + time\n    return datetime\n  }\n\n  deleteSquiggle = () => {\n    this.props.deleteSquiggle(this.props.squiggle.id)\n  }\n\n  render () {\n\n    const squiggle = this.props.squiggle\n\n    return (\n\n      <Grid item key={squiggle.id} xs={12}>\n        <CardActionArea component=\"a\" href=\"#\">\n          <Card >\n\n            <Grid container spacing={0}>\n\n              <Grid item xs={8}>\n\n                <div >\n                  <CardContent>\n                    <Typography component=\"h2\" variant=\"h5\">\n                      🌰{squiggle.user.handle}\n                    </Typography>\n                    <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                      {this.prettify(squiggle.created_at)}\n                    </Typography>\n                    <Typography variant=\"subtitle1\" paragraph>\n                      {squiggle.body}\n                    </Typography>\n\n                    <Like squiggle={squiggle} toggleLike={this.toggleLike}/>\n                    <Delete isMine={this.state.isMine} deleteSquiggle={this.deleteSquiggle}/>\n\n                  </CardContent>\n                </div>\n              </Grid>\n\n              <Grid item xs={4}>\n\n                <CardMedia\n                  image={piccy}\n                  style = {{height:\"100%\"}}\n                  title=\"Image title\"\n                />\n\n              </Grid>\n\n            </Grid>\n          </Card>\n\n\n        </CardActionArea>\n      </Grid>\n    )\n  }\n}\n\nSquiggle.propTypes = {\n  toggleLike: PropTypes.func.isRequired,\n  deleteSquiggle: PropTypes.func.isRequired,\n}\n\nexport default Squiggle ;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Grid from '@material-ui/core/Grid';\nimport Squiggle from './Squiggle'\n\n\nclass Squiggles extends React.Component {\n\n  toggleLike = (likeStatus) => {\n    this.props.toggleLike(likeStatus)\n  }\n\n  deleteSquiggle = (id) => {\n    this.props.deleteSquiggle(id)\n  }\n\n  render () {\n    const squiggles = this.props.squiggles\n    return (\n      <Grid container spacing={4}>\n        {squiggles.map((squiggle)=>(\n\n          <Squiggle key={squiggle.id}\n            squiggle={squiggle}\n            toggleLike={this.toggleLike}\n            deleteSquiggle={this.deleteSquiggle}/>\n\n        ))}\n      </Grid>\n\n    )\n\n  }\n}\n\nSquiggles.propTypes = {\n  toggleLike: PropTypes.func.isRequired,\n  deleteSquiggle: PropTypes.func.isRequired\n}\n\nexport default Squiggles;\n","import React from 'react'\nimport CreateSquiggle from './CreateSquiggle'\nimport Squiggles from './Squiggles'\nimport axios from 'axios'\n\nclass FowwestView extends React.Component {\n\n  state = {\n    squiggles: [],\n    user_id: sessionStorage.getItem('user_id'),\n    session_key: sessionStorage.getItem('session_key')\n  };\n\n  componentDidMount() {\n    axios\n      .get('https://chitter-backend-api.herokuapp.com/peeps')\n      .then((res) => this.setState({ squiggles: res.data }));\n  }\n\n  createSquiggle = (squiggle) => {\n    axios.post(\n      'https://chitter-backend-api.herokuapp.com/peeps',\n      {\"peep\": {\"user_id\":this.state.user_id, \"body\":squiggle}},\n      {headers:{\n        \"Authorization\": `Token token=${this.state.session_key}`,\n        \"Content-Type\": \"application/json\"\n      }}\n    )\n    .then(res => {\n      console.log(res)\n      console.log(res.data)\n      this.setState({ squiggles: [res.data, ...this.state.squiggles]})\n    })\n  }\n\n  toggleLike = (likeStatus) => {\n    console.log(\"fowwest\" + likeStatus)\n  }\n\n  deleteSquiggle = (id) => {\n    axios.delete(\n      `https://chitter-backend-api.herokuapp.com/peeps/${id}`,\n      {headers: {\n       \"Authorization\": `Token token=${this.state.session_key}`\n      }}\n    ).then(res => {\n      console.log(res)\n      this.deleteSquiggleFromState(id)\n    })\n  }\n\n  deleteSquiggleFromState = (id) => {\n    const array = this.state.squiggles\n    const filtered = array.filter(squiggle => squiggle.id !== id)\n    this.setState({squiggles:filtered})\n  }\n\n\n\n  render () {\n\n    return (\n    <div>\n    <CreateSquiggle createSquiggle={this.createSquiggle} />\n    <Squiggles squiggles={this.state.squiggles} toggleLike={this.toggleLike} deleteSquiggle={this.deleteSquiggle}/>\n    </div>\n    )\n\n  }\n}\n\nexport default FowwestView;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom'\nimport Gateway from './components/Gateway'\nimport SignUp from './components/SignUp'\nimport LogIn from './components/LogIn'\nimport FowwestView from './components/FowwestView'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <HashRouter baseline={process.env.PUBLIC_URL}>\n          <Route exact path = \"/\" component={Gateway} />\n\n            <Route path = \"/signup\" component={SignUp} />\n            <Route path = \"/login\" component={LogIn} />\n\n          <Route path = \"/squiggles\" component={FowwestView} />\n        </HashRouter>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/acorn.4ee5f938.svg\";","module.exports = __webpack_public_path__ + \"static/media/squiggle_default.ca58fb5a.jpeg\";"],"sourceRoot":""}